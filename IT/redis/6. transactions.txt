1. MULTI EXEC DISCARD WATCH UNWATCH是Redis事务的基础

2. Redis事务保证
   1. 事务中的命令都是按顺序执行的, 事务执行过程中, 不会被其他客户端发的命令打断
   2. 事务的操作时原子的, 要么都执行, 要么都不执行

3. 使用方法
   1. Redis的事务以MULTI命令开始, 用户输入的多条命令会被Redis缓存到队列
   2. 当调用EXEC方法时, 所有命令都会被执行
   3. 如果调用DISCARD, 那么队列中所有命令都会清除, 然后退出事务

4. 事务中的错误
   1. 命令没有进入队列(语法错误, 内存溢出...)
      在EXEC之前客户端通过检测是否成功缓存, 如果失败客户端就会取消这个事务
      2.6.5之后, 服务端也会拒绝执行这个事务
      2.6.5之前, 会执行部分入队的命令
   2. 执行EXEC后出现的错误(操作的数据类型错误等运行时错误)
      redis会忽略出错的命令, 继续执行后续命令

5. 为什么Redis不支持回滚
   1. Redis的错误只会因为语法错误或者使用错误的数据类型等, 这些问题很容易在开发阶段避免
   2. 为了内部的简化和速度

6. 使用EXEC取消事务

7. 乐观锁
   使用WATCH监视事务中的某些key, 如果在EXEC之前, 这些key的值被修改了, 那么整个事务就失败了,
   并且EXEC会返回nil. 不管事务是否成功所有key都会变为unwatch状态.

8. 事务与脚本
   所有使用事务能做的事情, 使用脚本也能做, 因为脚本是事务性的, 而且使用脚本更加简单和迅速
   因为从Redis2.6才引入脚本, 而事务在很久之前就存在了,  现在的业务也不太可能都是有脚本实现,
   如果那样的话, Redis开发团队就会废弃事务并最终移除了.