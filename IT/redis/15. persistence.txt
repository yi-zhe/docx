Redis 持久化

    1. RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照
    2. AOF 持久化记录服务器执行的所有写操作命令, 并在服务器启动时, 通过重新执行这些命令来还原数据集
    3. edis 还可以同时使用 AOF 持久化和 RDB 持久化. 在这种情况下,  当 Redis 重启时,  它会优先使用 AOF 文件来还原数据集,  因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整
    4. 你甚至可以关闭持久化功能, 让数据只在服务器运行时存在

RDB的优点

    1. RDB 是一个非常紧凑（compact）的文件, 它保存了 Redis 在某个时间点上的数据集. 这种文件非常适合用于进行备份
    2. RDB非常适合灾难恢复, 
    3. RDB可以最大化Redis的性能, 父进程只需要fork子进程, 让其完成保存工作, 而自己不会做I/O操作
    4. 与AOF相比, RDB的恢复速度更快

RDB的缺点

    1. 如果你需要尽量避免在服务器故障时丢失数据, 那么 RDB 不适合你, 做快照是有时间间隔的, 
       所以最坏情况下可能丢失几分钟的数据

    2. 如果数据集比较大, fork可能花费几毫秒甚至一秒钟的时间, 此期间服务器无法响应客户端请求

AOF的优点

    1. 使用 AOF 持久化会可以设置不同的 fsync 策略, 比如无 fsync,每秒钟一次 fsync,或者每次执行写入命令时 fsync
       AOF 的默认策略为每秒钟 fsync 一次, 在这种配置下, Redis 仍然可以保持良好的性能, 并且就算发生故障停机, 也最多只会丢失一秒钟的数据
    2. AOF 文件是一个只进行追加操作的日志文件（append only log）,  因此对 AOF 文件的写入不需要进行 seek , 
       即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满, 写入中途停机, 等等）,  
       redis-check-aof 工具也可以轻易地修复这种问题

    3. Redis 可以在 AOF 文件体积变得过大时, 自动地在后台对 AOF 进行重写
    4. AOF 文件有序地保存了对数据库执行的所有写入操作, 但只要 AOF 文件未被重写
       可以修改AOF的导致数据破坏的命令, 重启服务进行恢复

AOF的缺点

    1. 对于相同的数据集, aof文件比rdb更大
    2. 根据同步策略的不同aof可能比rdb慢
    3. 可能有些很难复现的bug导致恢复的数据与原始数据集不一致, 但RDB中没有

使用哪种持久化方式

    1. 都是用如果想要得到最高的数据安全性
    2. 如果可以忍受几分钟的数据丢失, 可以只使用RDB
    3. 不建议只使用AOF

快照

    1. save 60 1000 在60s内至少有1000个key更新了, 就会保存一次

    dump数据的过程
    1. Redis创建子进程
    2. 子进程向一个临时的RDB文件写入数据
    3. 如果完成了写操作, 那么替换旧的RDB文件

只进行追加的文件

    1. appendonly yes

    日志重写
    1. Redis可以在不影响其他客户端的情况下对AOF进行重写
    2. 或者执行BGREWRITEAOF命令

    aof文件的持久性
    1. fsync 每次有写命令就执行, 非常缓慢
    2. fsync every second 每秒执行一次, 很快, 最多丢失一秒钟的数据
    3. never fsync 等待操作系统调度


    如果aof文件损坏了
    1. 备份一下aof文件
    2. 执行redis-check-aof --fix
    3. 对比两个文件的异同
    4. 使用修复后的aof文件重启服务器


    aof重写的执行步骤
    1. Redis 执行 fork() , 现在同时拥有父进程和子进程.
    2. 子进程开始将新 AOF 文件的内容写入到临时文件.
    3. 对于所有新执行的写入命令, 父进程一边将它们累积到一个内存缓存中, 一边将这些改动追加到现有 AOF 文件的末尾:
       这样即使在重写的中途发生停机, 现有的 AOF 文件也还是安全的.
    4. 当子进程完成重写工作时, 它给父进程发送一个信号, 父进程在接收到信号之后, 将内存缓存中的所有数据追加到新 AOF 文件的末尾.
    5. 现在 Redis 原子地用新文件替换旧文件, 之后所有命令都会直接追加到新 AOF 文件的末尾



    从RDB切换到AOF
    1. 为最新的dump.rdb创建一个备份(转移到安全的地方)
    2. 执行命令
       1. CONFIG SET appendonly yes
       2. CONFIG SET save ""
       (关闭rdb持久化, 可以不做)
    3. 确保执行命令后数据库key的数量没变
    4. 确保写命令会正确的追加到AOF文件末尾

RDB和AOF之间的相互作用

    1. Redis2.4以后, BGSAVE过程中不会执行BGREWRITEAOF 反之亦然
    2. 防止两个进程进行大量的IO活动
    3. 如果 BGSAVE 正在执行, 并且用户显示地调用 BGREWRITEAOF 命令, 那么服务器将向用户回复一个 OK 状态, 并告知用户, 
       BGREWRITEAOF 已经被预定执行: 一旦 BGSAVE 执行完毕, BGREWRITEAOF 就会正式开始
    4. 当 Redis 启动时, 如果 RDB 持久化和 AOF 持久化都被打开了, 那么程序会优先使用 AOF 文件来恢复数据集, 因为 AOF 文件所保存的数据通常是最完整的

备份Redis数据

    1. 创建一个定期任务（cron job）, 每小时将一个 RDB 文件备份到一个文件夹, 并且每天将一个 RDB 文件备份到另一个文件夹.
    2. 确保快照的备份都带有相应的日期和时间信息, 每次执行定期任务脚本时, 使用 find 命令来删除过期的快照： 
       比如说, 你可以保留最近 48 小时内的每小时快照, 还可以保留最近一两个月的每日快照.
    3. 至少每天一次, 将 RDB 备份到你的数据中心之外, 或者至少是备份到你运行 Redis 服务器的物理机器之外