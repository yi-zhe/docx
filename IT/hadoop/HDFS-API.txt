

一段代码获得HDFS系统对象
===========================

    public static void main(String[] args) {
        Configuration conf = new Configuration();
        FileSystem fileSystem = new FileSystem(conf);

        System.out.println(fileSystem);
    }


HDFS-API读文件
===========================

    public void read(String file) throws Exception {
        Configuration conf = new Configuration();
        FileSystem fileSystem = new FileSystem(conf);
        Path path = new Path(file);
 
        FSDataInputStream fis = fileSystem.open(path);
        IOUtils.copyBytes(fis, System.out, 1024);
        IOUtils.closeStream(fis);
    }

HDFS-API写文件(注意写入目录的权限)
===========================

    public void write(String putFile, String srcFile) throws Exception {
        Configuration conf = new Configuration();
        FileSystem fileSystem = new FileSystem(conf);
        Path putPath = new Path(putFile);
 
        FSDataOutputStream fos = fileSystem.create(path);
        FileInputStream fis = new FileInputStream(new File(srcFile));
        IOUtils.copyBytes(fis, fos, 1024);
        IOUtils.closeStream(fis);
        IOUtils.closeStream(fos);

    }

NameNode启动过程
===========================
      * 内存
      * 本地磁盘
          * fsimage 
          * edits

格式化HDFS 目的是生成fsimage

0 -> format
1 -> fsimage
2 -> Start NameNode
     * 读取镜像文件
     * 

3 -> Start DataNode
     * 注册
     * report block

4 -> create dir   -> write edits
5 -> put files    -> write edits(记录元数据变化信息)

第二次启动
1 -> 启动NameNode
     读取fsimage
     读取edits
     生成新的fsimage
     生成新的edits

辅助名字节点SecondNameNode的功能
===================================

    周期性地合并fsimage和edits文件为一个新的fsimage









